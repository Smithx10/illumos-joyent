 _ _ _                                                                
(_) | |_   _ _ __ ___   ___  ___    ___  _ __     __ _ _ __ _ __ ___  
| | | | | | | '_ ` _ \ / _ \/ __|  / _ \| '_ \   / _` | '__| '_ ` _ \ 
| | | | |_| | | | | | | (_) \__ \ | (_) | | | | | (_| | |  | | | | | |
|_|_|_|\__,_|_| |_| |_|\___/|___/  \___/|_| |_|  \__,_|_|  |_| |_| |_|


Welcome brave fool. Don't Panic! The writer of this README is an even bigger
fool than you could be (even if old Ben wonders if those who follow fools are
more foolish).

So here's where you get started building illumos on ARM.

Step 1) You need to get a build environment set up. There's the easy way and the
fun way.

Easy way:

cd $HOME
curl -O https://fingolfin.org/illumos/arm/armtc.tar.gz
pfexec tar xvzf armtc.tar.gz -C /
find /opt/armtc

Fun way:

Clone this repository again and do a normal i386 on i386 build.
mkdir -p /opt/armtc/lib/amd64 /opt/armtc/usr/bin/amd64
cd /opt/armtc/lib/
ln -s amd64 64
cd ../usr/bin
ln -s amd64 64

Then from your proto area, install the following:
 o /usr/bin/ld
 o /usr/bin/amd64/ld
 o /lib/libld.so.4
 o /lib/amd64/libld.so.4
 o /lib/liblddbg.so.4
 o /lib/amd64/liblddb.so.4
 o /lib/libelf.so.1
 o /lib/amd64/libelf.so.1

Now that's all set go grab illumos-arm-extra (git clone
gitosis@zelgadis.fingolfin.org:illumos-arm-extra.git) and build that. You'll
need something like:

gmake ARCH=arm STRAP=strap LD_ALTEXEC=/opt/armtc/usr/bin/ld install

Once that's done, you'll need to fix up the rpath there. so from the root of
that workspace run:

./tools/setrpath proto-arm/usr/ /opt/armtc/usr/lib:/opt/gcc/4.4.4/lib:/lib:/usr/lib

Finally, you can copy all of that into your arm compiler toolchain directory
(use pfexec / sudo as appropriate):

cp -r proto-arm/usr /opt/armtc/

Step 2) Set up illumos.sh

In a fresh workspace, you're going to want to set up your illumos.sh with the
following:

# Enable GCC 4 default
export __GNUC="";
export CW_NO_SHADOW=1
export MACH=arm;
export NATIVE_MACH=i386;
export BUILD64="#"
 
# Re-set all this MACH-based crud
REF_PROTO_LIST=$PARENT_WS/usr/src/proto_list_${MACH}; export REF_PROTO_LIST
ROOT="$CODEMGR_WS/proto/root_${MACH}"; export ROOT
PARENT_ROOT=$PARENT_WS/proto/root_$MACH; export PARENT_ROOT
PKGARCHIVE="${CODEMGR_WS}/packages/${MACH}/nightly"; export PKGARCHIVE
unset GCC_ROOT GNU_ROOT CW_GCC_DIR
export i386_GCC_ROOT=/opt/gcc/4.4.4
export arm_GCC_ROOT=/opt/armtc/usr
export i386_GNU_ROOT=/usr/sfw
export arm_GNU_ROOT=/opt/armtc/usr/gnu

#
# XXX our gcc isn't called ./usr/bin/gcc fix it up via CW env vars for now.
#
export CW_arm_GCC=/opt/armtc/usr/bin/arm-pc-solaris2.11-gcc-4.6.3

#
# XXX We need to set CPP to our specific cpp, not the generic /usr/ccs/lib/cpp
# as that's rather, well, x86.
#
export CPP=/opt/armtc/usr/lib/cpp
export AW_CPP=/opt/armtc/usr/lib/cpp
export LD_ALTEXEC=/opt/armtc/usr/bin/ld

Step 3) Start your build engines

Once you've done that, you're doing to need to need to use the *new* bldenv to
get started building. For the first time you can go ahead and do something like: 

cd usr/src
ksh93 ./tools/scripts/bldenv.sh ../../illumos.sh

This is really just a bit of a bootstrapping weirdness. Once that's done you can
go ahead and continue on.

As a part of this you should see an important two lines:

Cross-building enabled
Targeting arm on i386

If you don't, stop. illumos.sh is not configured correctly.


Once you have that you can get going. Start off with a resounding:

dmake setup

That should even go and install all the primoridal uts headers that we have for
ARM!

There is a sample how to build 'unix' in uts/armv6. As that is currently the
next step, cd uts/armv6 && dmake You now have a lovely unix.bin. Note that
should not actually produce any meaningful output on the Raspberry Pi as of
today.
